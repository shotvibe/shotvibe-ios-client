//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/jre/java/lang/Float.java
//
//  Created by raptor on 1/9/14.
//

#include "IOSClass.h"
#include "IOSFloatArray.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Float.h"
#include "java/lang/NullPointerException.h"
//#import "java/lang/NumberFormatException.h"

// From apache-harmony/classlib/modules/luni/src/main/native/luni/shared/floatbits.c
#define SINGLE_EXPONENT_MASK    0x7F800000
#define SINGLE_MANTISSA_MASK    0x007FFFFF
#define SINGLE_NAN_BITS         (SINGLE_EXPONENT_MASK | 0x00400000)

@implementation JavaLangFloat

static IOSClass * JavaLangFloat_TYPE_;

+ (int)EXPONENT_BIAS {
  return JavaLangFloat_EXPONENT_BIAS;
}

+ (int)EXPONENT_BITS {
  return JavaLangFloat_EXPONENT_BITS;
}

+ (int)MANTISSA_BITS {
  return JavaLangFloat_MANTISSA_BITS;
}

+ (int)NON_MANTISSA_BITS {
  return JavaLangFloat_NON_MANTISSA_BITS;
}

+ (int)SIGN_MASK {
  return JavaLangFloat_SIGN_MASK;
}

+ (int)EXPONENT_MASK {
  return JavaLangFloat_EXPONENT_MASK;
}

+ (int)MANTISSA_MASK {
  return JavaLangFloat_MANTISSA_MASK;
}

+ (float)MAX_VALUE {
  return JavaLangFloat_MAX_VALUE;
}

+ (float)MIN_VALUE {
  return JavaLangFloat_MIN_VALUE;
}

+ (float)NaN {
  return JavaLangFloat_NaN;
}

+ (float)POSITIVE_INFINITY {
  return JavaLangFloat_POSITIVE_INFINITY;
}

+ (float)NEGATIVE_INFINITY {
  return JavaLangFloat_NEGATIVE_INFINITY;
}

+ (int)MAX_EXPONENT {
  return JavaLangFloat_MAX_EXPONENT;
}

+ (int)MIN_EXPONENT {
  return JavaLangFloat_MIN_EXPONENT;
}

+ (IOSClass *)TYPE {
  return JavaLangFloat_TYPE_;
}

+ (int)SIZE {
  return JavaLangFloat_SIZE;
}

- (id)initWithFloat:(float)value {
  if (self = [super init]) {
    self->value_ = value;
  }
  return self;
}

- (id)initWithDouble:(double)value {
  if (self = [super init]) {
    self->value_ = (float) value;
  }
  return self;
}

- (int)compareToWithId:(JavaLangFloat *)object {
  if (object != nil && ![object isKindOfClass:[JavaLangFloat class]]) {
    @throw [[JavaLangClassCastException alloc] init];
  }
  if (object == nil) {
    @throw [[JavaLangNullPointerException alloc] init];
  }
  return [JavaLangFloat compareWithFloat:value_ withFloat:((JavaLangFloat *) nil_chk(object))->value_];
}

- (char)charValue {
  return (char) value_;
}

- (double)doubleValue {
  return value_;
}

- (BOOL)isEqual:(id)object {
  if (!object || ![object isKindOfClass:[JavaLangFloat class]]) {
    return NO;
  }
  NSComparisonResult result = [self compare:object];
  return result == NSOrderedSame;
}

+ (int)floatToIntBitsWithFloat:(float)value {
  // Modified from Harmony JNI implementation.
  int intValue = *(int *) &value;
  if ((intValue & SINGLE_EXPONENT_MASK) == SINGLE_EXPONENT_MASK) {
    if (intValue & SINGLE_MANTISSA_MASK) {
      return SINGLE_NAN_BITS;
    }
  }
  return intValue;
}

+ (int)floatToRawIntBitsWithFloat:(float)value {
  return *(int *) &value;
}

- (float)floatValue {
  return value_;
}

- (NSUInteger)hash {
  return [JavaLangFloat floatToIntBitsWithFloat:value_];
}

+ (float)intBitsToFloatWithInt:(int)bits {
  return *(float *) &bits;
}

- (int)intValue {
  return (int) value_;
}

- (BOOL)isInfinite {
  return [JavaLangFloat isInfiniteWithFloat:value_];
}

+ (BOOL)isInfiniteWithFloat:(float)f {
  return isinf(f);
}

- (BOOL)isNaN {
  return [JavaLangFloat isNaNWithFloat:value_];
}

+ (BOOL)isNaNWithFloat:(float)f {
  return isnan(f);
}

- (long long int)longLongValue {
  return (long long int) value_;
}

+ (float)nativeParseFloatWithNSString:(NSString *)s {
  return [s floatValue];
}

- (short int)shortValue {
  return (short int) value_;
}

- (NSString *)description {
  return [JavaLangFloat toStringWithFloat:value_];
}

+ (NSString *)toStringWithFloat:(float)f {
  return nil;
}

+ (int)compareWithFloat:(float)float1
              withFloat:(float)float2 {
  if (float1 > float2) {
    return 1;
  }
  if (float2 > float1) {
    return -1;
  }
  if (float1 == float2 && 0.0f != float1) {
    return 0;
  }
  if ([JavaLangFloat isNaNWithFloat:float1]) {
    if ([JavaLangFloat isNaNWithFloat:float2]) {
      return 0;
    }
    return 1;
  }
  else if ([JavaLangFloat isNaNWithFloat:float2]) {
    return -1;
  }
  int f1 = [JavaLangFloat floatToRawIntBitsWithFloat:float1];
  int f2 = [JavaLangFloat floatToRawIntBitsWithFloat:float2];
  return (f1 >> 31) - (f2 >> 31);
}

+ (JavaLangFloat *)valueOfWithFloat:(float)f {
  return [[JavaLangFloat alloc] initWithFloat:f];
}

+ (NSString *)toHexStringWithFloat:(float)f {
  return [NSString stringWithFormat:@"%A", (double) f];
}

+ (void)initialize {
  if (self == [JavaLangFloat class]) {
    JavaLangFloat_TYPE_ = (IOSClass *) check_class_cast([[[IOSFloatArray arrayWithLength:0] getClass] getComponentType], [IOSClass class]);
  }
}

- (void)copyAllFieldsTo:(JavaLangFloat *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

- (const char *)objCType {
  return "f";
}

- (void)getValue:(void *)buffer {
  *((float *) buffer) = value_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithFloat:", "Float", NULL, 0x1, NULL },
    { "initWithDouble:", "Float", NULL, 0x1, NULL },
    { "compareToWithJavaLangFloat:", "compareTo", "I", 0x1, NULL },
    { "charValue", "byteValue", "B", 0x1, NULL },
    { "doubleValue", NULL, "D", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x101, NULL },
    { "floatToIntBitsWithFloat:", "floatToIntBits", "I", 0x109, NULL },
    { "floatToRawIntBitsWithFloat:", "floatToRawIntBits", "I", 0x109, NULL },
    { "floatValue", NULL, "F", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "intBitsToFloatWithInt:", "intBitsToFloat", "F", 0x109, NULL },
    { "intValue", NULL, "I", 0x1, NULL },
    { "isInfinite", NULL, "Z", 0x1, NULL },
    { "isInfiniteWithFloat:", "isInfinite", "Z", 0x109, NULL },
    { "isNaN", NULL, "Z", 0x1, NULL },
    { "isNaNWithFloat:", "isNaN", "Z", 0x109, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL },
    { "nativeParseFloatWithNSString:", "nativeParseFloat", "F", 0x10a, NULL },
    { "shortValue", NULL, "S", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithFloat:", "toString", "Ljava.lang.String;", 0x9, NULL },
    { "compareWithFloat:withFloat:", "compare", "I", 0x9, NULL },
    { "valueOfWithFloat:", "valueOf", "Ljava.lang.Float;", 0x9, NULL },
    { "toHexStringWithFloat:", "toHexString", "Ljava.lang.String;", 0x109, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "EXPONENT_BIAS_", NULL, 0x18, "I" },
    { "EXPONENT_BITS_", NULL, 0x18, "I" },
    { "MANTISSA_BITS_", NULL, 0x18, "I" },
    { "NON_MANTISSA_BITS_", NULL, 0x18, "I" },
    { "SIGN_MASK_", NULL, 0x18, "I" },
    { "EXPONENT_MASK_", NULL, 0x18, "I" },
    { "MANTISSA_MASK_", NULL, 0x18, "I" },
    { "value_", NULL, 0x12, "F" },
    { "MAX_VALUE_", NULL, 0x19, "F" },
    { "MIN_VALUE_", NULL, 0x19, "F" },
    { "NaN_", NULL, 0x19, "F" },
    { "POSITIVE_INFINITY_", NULL, 0x19, "F" },
    { "NEGATIVE_INFINITY_", NULL, 0x19, "F" },
    { "MAX_EXPONENT_", NULL, 0x19, "I" },
    { "MIN_EXPONENT_", NULL, 0x19, "I" },
    { "TYPE_", NULL, 0x19, "Ljava.lang.Class;" },
    { "SIZE_", NULL, 0x19, "I" },
  };
  static J2ObjcClassInfo _JavaLangFloat = { "Float", "java.lang", NULL, 0x11, 24, methods, 17, fields, 0, NULL};
  return &_JavaLangFloat;
}

@end
