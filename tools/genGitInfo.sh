# from http://kylefuller.co.uk/posts/versioning-with-xcode-and-git/

# TODO: not sure if this is the way to go since it changes bundle version
kShortSHA=`git rev-parse --short HEAD`
kIsDirty=`git diff --quiet || echo "(*)"`
kCurrentBranch=`git rev-parse --abbrev-ref HEAD`

# A bit verbose, but doesn't fail for missing remotes
kRemoteTracking=`git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)`
kBuildTime=`date`
#echo "#define GIT_INFO $gitInfo  $DERIVED_FILE_DIR" > GitInfoPlist.h
#touch $PROJECT_DIR/shotvibe/shotvibe-Info.plist
echo "// Git info constants generated by tools/genGitInfo.sh, do not edit!
#define kShortSHA @\"${kShortSHA}\"
#define kCurrentBranch @\"${kCurrentBranch}\"
#define kIsDirty @\"${kIsDirty}\"
#define kRemoteTracking @\"${kRemoteTracking}\"
#define kBuildTime @\"${kBuildTime}\"
" > $PROJECT_DIR/shotvibe/GeneratedGitInfo.h

#defaults write "${BUILT_PRODUCTS_DIR}/${INFOPLIST_PATH%.*}" "CFBundleShortVersionString" "${gitInfo}"
#defaults write "${BUILT_PRODUCTS_DIR}/${INFOPLIST_PATH%.*}" "CFBundleVersion" "${COMMITS}"

# Other approaches execute after building, so the git info is always one build behind
# http://www.cimgf.com/2011/02/20/revisiting-git-tags-and-building/
